using System;
using System.Collections.Generic;
using System.Text;

public class Program
{
		public static void Main(string[] args)
		{
			Console.WriteLine("My Test Cases!");
			TestOldPhonePad.RunTests();
		}
		
		public class TestOldPhonePad
    {
      public static void RunTests()
      {
        Console.WriteLine(OldPhone.OldPhonePad("33#"));// "E"
        Console.WriteLine(OldPhone.OldPhonePad("227*#"));//  "B"
        Console.WriteLine(OldPhone.OldPhonePad("4433555 555666#"));// "HELLO"
        Console.WriteLine(OldPhone.OldPhonePad("8 88777444666*664#"));// "TURING" 
        Console.WriteLine(OldPhone.OldPhonePad("222 2 22#")); //"CAB"
        Console.WriteLine(OldPhone.OldPhonePad("4433555 555666#"));
        
      }
    }

		public class OldPhone
    {
      private static readonly Dictionary<char, string> KeyMap = new Dictionary<char, string>
      {
        {'1', ""}, 
        {'2', "ABC"},
        {'3', "DEF"},
        {'4', "GHI"},
        {'5', "JKL"},
        {'6', "MNO"},
        {'7', "PQRS"},
        {'8', "TUV"},
        {'9', "WXYZ"},
        {'0', " "},  // Common interpretation
      };

    
      public static string OldPhonePad(string input)
      {
        if (string.IsNullOrEmpty(input) || !input.EndsWith("#"))
            throw new ArgumentException("Input must end with '#'");

        input = input.TrimEnd('#');

        StringBuilder result = new StringBuilder();
        List<char> currentPresses = new List<char>();

        for (int i = 0; i < input.Length; i++)
        {
            char c = input[i];

            if (c == ' ')
            {
                AppendCharacter(result, currentPresses);
                currentPresses.Clear();
            }
            else if (c == '*')
            {
                // Backspace logic
                if (currentPresses.Count > 0)
                {
                    currentPresses.Clear();
                }
                else if (result.Length > 0)
                {
                    result.Length--; // Remove last character
                }
            }
            else if (char.IsDigit(c))
            {
                if (currentPresses.Count > 0 && currentPresses[currentPresses.Count - 1] != c)
                {
                    AppendCharacter(result, currentPresses);
                    currentPresses.Clear();
                }
                currentPresses.Add(c);
            }
        }

        // Handle last sequence if present
        if (currentPresses.Count > 0)
        {
            AppendCharacter(result, currentPresses);
        }

        return result.ToString();
    }

      private static void AppendCharacter(StringBuilder result, List<char> presses)
      {
        if (presses.Count == 0)
            return;

        char key = presses[0];
        if (KeyMap.ContainsKey(key) && KeyMap[key].Length > 0)
        {
            int index = (presses.Count - 1) % KeyMap[key].Length;
            result.Append(KeyMap[key][index]);
        }
      }
  }
}



